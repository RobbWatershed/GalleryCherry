package me.devsaki.hentoid.json.sources.kemono

import com.squareup.moshi.JsonClass
import me.devsaki.hentoid.activities.sources.COOMER_DOMAIN_FILTER
import me.devsaki.hentoid.database.domains.Chapter
import me.devsaki.hentoid.enums.StatusContent
import me.devsaki.hentoid.parsers.urlsToImageFiles
import me.devsaki.hentoid.util.getRandomInt
import me.devsaki.hentoid.util.image.isSupportedImage
import java.net.URLEncoder
import java.util.concurrent.atomic.AtomicInteger

/**
 * Kemono posts generated by calling the "posts" API endpoint
 */
@JsonClass(generateAdapter = true)
data class KemonoPost(
    val id: String,
    val service: String,
    val title: String,
    val published: String?,
    val attachments: List<KemonoAttachment>
) {
    fun toChapter(
        userId: String,
        chapterOrder: AtomicInteger,
        pageOrder: AtomicInteger,
        nbPagesTotal: Int
    ): Chapter {
        // One result = one chapter, if it contains at least an usable picture (i.e. not exclusively MEGA links)
        val imageUrls = attachments
            .filter { isSupportedImage(it.path ?: "") }
            .distinct()
            .map {
                val server = getRandomInt(4) + 1
                val origin = URLEncoder.encode(it.name, "UTF-8")
                "https://n$server.$COOMER_DOMAIN_FILTER/data/${it.path}?f=$origin"
            }
        val chapter = Chapter(
            chapterOrder.andIncrement,
            "https://$COOMER_DOMAIN_FILTER/${service}/user/${userId}/post/${id}",
            title
        )
        if (imageUrls.isNotEmpty()) {
            val imageFiles = urlsToImageFiles(
                imageUrls,
                pageOrder.get(),
                StatusContent.SAVED,
                nbPagesTotal,
                chapter
            )
            pageOrder.set(imageFiles.maxOf { it.order } + 1)
            chapter.setImageFiles(imageFiles)
        }
        return chapter
    }
}